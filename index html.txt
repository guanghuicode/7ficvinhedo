<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sorteio FIC 2025</title>
    <!-- Tailwind CSS CDN para um visual moderno e responsivo -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Font Inter para melhor tipografia -->
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;600;700&display=swap');
        body {
            font-family: 'Inter', sans-serif;
            print-color-adjust: exact; /* Permite imprimir cores de fundo e texto */
        }
        /* Estilos personalizados para a impressão dos QR Codes */
        @media print {
            body > *:not(#modal-backdrop):not(.qr-print-area) {
                display: none; /* Esconde tudo, exceto a área de QR Codes */
            }
            .qr-print-area {
                display: block !important;
                margin: 0;
                padding: 0;
            }
            .qr-print-area .qr-code-item {
                page-break-inside: avoid;
                width: 30%; /* Três QRs por linha */
                margin-bottom: 20px;
                display: inline-block;
                text-align: center;
                border: 1px solid #ccc;
                padding: 10px;
                border-radius: 8px;
                box-shadow: none; /* Remove sombra na impressão */
            }
            .qr-print-area button {
                display: none; /* Esconde o botão de impressão dentro da área de impressão */
            }
        }
        /* Animação para o resultado do sorteio */
        @keyframes bounce-slow {
          0%, 100% {
            transform: translateY(-5%);
            animation-timing-function: cubic-bezier(0.8, 0, 1, 1);
          }
          50% {
            transform: translateY(0);
            animation-timing-function: cubic-bezier(0, 0, 0.2, 1);
          }
        }
        .animate-bounce-slow {
          animation: bounce-slow 2s infinite;
        }
    </style>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        primary: '#4361ee',
                        secondary: '#3f37c9',
                        success: '#4cc9f0',
                        danger: '#e63946',
                        accent: '#fca311',
                    }
                }
            }
        }
    </script>
    <!-- Firebase SDK Imports -->
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, collection, query, onSnapshot, doc, getDocs, setDoc, updateDoc, deleteDoc, addDoc, where } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";
        import { setLogLevel } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // Variáveis globais de ambiente (MANDATÓRIAS)
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';

        // ====================================================================================
        // !!! INSTRUÇÃO IMPORTANTE: COLE SUA CONFIGURAÇÃO DO FIREBASE AQUI !!!
        // Substitua o '...' com a SUA string JSON (começando em { e terminando em })
        // MANTENHA AS ASPAS SIMPLES ' ' EM VOLTA DO JSON COMPLETO!
        // Exemplo: '{"apiKey": "AIzaSy...", "authDomain": "...", "projectId": "..."}'
        // ====================================================================================
        const firebaseConfig = JSON.parse(typeof __firebase_config !== 'undefined' ? __firebase_config : '{
  apiKey: "AIzaSyCbYNNpIRIP_TLDddHyg7QzRm94Us7U6KA",
  authDomain: "fic-em-movimento-2025.firebaseapp.com",
  projectId: "fic-em-movimento-2025",
  storageBucket: "fic-em-movimento-2025.firebasestorage.app",
  messagingSenderId: "341551359643",
  appId: "1:341551359643:web:5e10cca820fa3f01ce883e",
  measurementId: "G-9H5JY1QWRD"
}');
        // SE ESTIVER COM ERRO, A LINHA ACIMA DEVE FICAR ASSIM:
        // const firebaseConfig = JSON.parse(typeof __firebase_config !== 'undefined' ? __firebase_config : '{"apiKey": "SEU_API_KEY", "authDomain": "SEU_DOMINIO", "projectId": "SEU_PROJETO", "storageBucket": "...", "messagingSenderId": "...", "appId": "..."}');
        // ====================================================================================
        
        const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;
        
        let app, db, auth;
        let userId = null;
        let participantes = []; // Lista centralizada, populada pelo Firestore

        // Constantes para caminhos no Firestore (Dados Públicos Compartilhados)
        const PARTICIPANTES_COLLECTION_PATH = `artifacts/${appId}/public/data/participants`;
        
        // Dados para Inserir (Usuários Teste)
        const USUARIOS_TESTE = [
            { nome: "João Teste Qualificado", cpf: "11111111111", checkpoints: ["checkpoint1", "checkpoint2", "checkpoint3"] },
            { nome: "Maria Teste Pendente", cpf: "22222222222", checkpoints: ["checkpoint1", "checkpoint2"] },
            { nome: "Carlos Teste Novo", cpf: "33333333333", checkpoints: [] }
        ];

        // Expor funções globais para que possam ser acessadas pelos manipuladores de eventos no HTML
        window.fazerInscricao = fazerInscricao;
        window.fazerLogin = fazerLogin;
        window.iniciarCamera = iniciarCamera;
        window.pararCamera = pararCamera;
        window.acessarAdmin = acessarAdmin;
        window.gerarQRCodes = gerarQRCodes;
        window.realizarSorteio = realizarSorteio;
        window.exportarParaPlanilha = exportarParaPlanilha;
        window.removerParticipante = removerParticipante;
        window.showMessage = showMessage;
        window.showConfirm = showConfirm;
        window.formatarCPF = formatarCPF;
        window.carregarUsuariosTeste = carregarUsuariosTeste; // Nova função exposta

        // --- INICIALIZAÇÃO E AUTENTICAÇÃO ---

        async function initFirebase() {
            if (Object.keys(firebaseConfig).length === 0) {
                console.error("Firebase config is missing. Cannot initialize. Please paste your config in the code.");
                // Mostra a mensagem de erro para o usuário
                document.getElementById('card-login').style.display = 'block';
                document.getElementById('card-login').innerHTML = `<h2 class="text-2xl font-semibold mb-4 text-danger">Erro de Configuração!</h2><p class="text-gray-700">O app não está conectado ao Firebase. Por favor, cole suas chaves de configuração no código (instruções no chat).</p>`;
                return;
            }

            try {
                // setLogLevel('debug'); // Descomentar para debug
                app = initializeApp(firebaseConfig);
                auth = getAuth(app);
                db = getFirestore(app);

                // 1. Autenticação: Tenta usar o token customizado ou faz login anônimo
                if (initialAuthToken) {
                    await signInWithCustomToken(auth, initialAuthToken);
                } else {
                    await signInAnonymously(auth);
                }

                // 2. Listener de Estado de Autenticação
                onAuthStateChanged(auth, (user) => {
                    if (user) {
                        userId = user.uid;
                        // Inicia o listener de dados após a autenticação
                        setupRealtimeListener(); 
                        console.log("Usuário autenticado:", userId);

                        // Tenta restaurar a sessão do participante via ID do Firestore (se salvo localmente)
                        const localParticipantId = localStorage.getItem('usuarioAtualId');
                        if (localParticipantId) {
                            findAndSetUsuarioAtual(localParticipantId);
                        } else {
                            // Se o usuário já tiver um documento de participante com este UID
                            const existingParticipant = participantes.find(p => p.authId === userId);
                            if (existingParticipant) {
                                fazerLoginUsuario(existingParticipant);
                            }
                        }
                    } else {
                        userId = null;
                        console.log("Nenhum usuário logado.");
                    }
                });

            } catch (error) {
                console.error("Erro na inicialização do Firebase:", error);
                showMessage('Erro Crítico', 'Não foi possível conectar ao banco de dados. Verifique a configuração.');
            }
        }

        function setupRealtimeListener() {
            if (!db) return;

            const q = query(collection(db, PARTICIPANTES_COLLECTION_PATH));
            
            // onSnapshot garante que a lista 'participantes' esteja sempre sincronizada
            onSnapshot(q, (querySnapshot) => {
                const updatedParticipantes = [];
                querySnapshot.forEach((doc) => {
                    // Guarda o ID do documento Firestore junto com os dados
                    updatedParticipantes.push({ docId: doc.id, ...doc.data() });
                });
                
                participantes = updatedParticipantes;
                console.log(`Participantes atualizados: ${participantes.length}`);

                // Atualiza a UI se houver um usuário logado ou se for o painel admin
                if (window.usuarioAtual) {
                    // Garante que o objeto local 'usuarioAtual' reflita os dados mais recentes do Firestore
                    const updatedUser = participantes.find(p => p.docId === window.usuarioAtual.docId);
                    if (updatedUser) {
                        window.usuarioAtual = updatedUser;
                        atualizarProgresso();
                    }
                }
                atualizarListaParticipantes();
                // Mostra o card de login/cadastro se houver dados
                if (participantes.length > 0) {
                    document.getElementById('card-login').style.display = 'block';
                }
            }, (error) => {
                console.error("Erro no listener do Firestore:", error);
                showMessage('Erro de Sincronização', 'Não foi possível carregar os dados em tempo real.');
            });
        }
        
        async function findAndSetUsuarioAtual(docId) {
            const user = participantes.find(p => p.docId === docId);
            if (user) {
                fazerLoginUsuario(user);
            } else {
                localStorage.removeItem('usuarioAtualId'); // Limpa se o docId não existe mais
                showMessage('Sessão Expirada', 'Sua sessão foi encerrada. Por favor, faça o login novamente.');
                document.getElementById('card-login').style.display = 'block';
                document.getElementById('card-usuario').style.display = 'none';
            }
        }

        // --- FUNÇÕES DE DADOS (AGORA USANDO FIRESTORE) ---
        
        async function fazerInscricao(e) {
            e.preventDefault();
            
            const nome = document.getElementById('nome').value.trim();
            const cpf = document.getElementById('cpf').value.replace(/\D/g, '');
            
            if (cpf.length !== 11) {
                showMessage('Erro na Inscrição', 'CPF deve ter 11 dígitos.');
                return;
            }
            
            if (participantes.find(p => p.cpf === cpf)) {
                showMessage('Aviso', 'CPF já cadastrado! Por favor, faça login.');
                return;
            }
            
            try {
                const novoParticipanteData = {
                    authId: userId, // Liga o participante ao usuário de autenticação atual
                    nome: nome,
                    cpf: cpf,
                    checkpoints: [],
                    dataInscricao: new Date().toISOString()
                };

                const docRef = await addDoc(collection(db, PARTICIPANTES_COLLECTION_PATH), novoParticipanteData);
                
                // O listener (onSnapshot) fará o download deste novo participante,
                // mas podemos setar o usuário localmente imediatamente para a melhor UX
                novoParticipanteData.docId = docRef.id;
                fazerLoginUsuario(novoParticipanteData);
                
                showMessage('Sucesso!', 'Inscrição realizada! Agora escaneie os QR Codes nas salas.');
                document.getElementById('form-inscricao').reset();

            } catch(error) {
                console.error("Erro ao fazer inscrição:", error);
                showMessage('Erro', 'Houve um erro ao salvar sua inscrição. Tente novamente.');
            }
        }
        
        function fazerLogin(e) {
            e.preventDefault();
            
            const cpf = document.getElementById('cpf-login').value.replace(/\D/g, '');
            const participante = participantes.find(p => p.cpf === cpf);
            
            if (participante) {
                fazerLoginUsuario(participante);
                showMessage('Login Realizado', `Bem-vindo(a) de volta, ${participante.nome.split(' ')[0]}!`);
                document.getElementById('form-login').reset();
            } else {
                showMessage('Erro no Login', 'CPF não encontrado. Faça sua inscrição primeiro.');
            }
        }
        
        function fazerLoginUsuario(participante) {
            // Guarda o objeto completo no global window (para ser acessado pelas outras funções)
            window.usuarioAtual = participante; 
            // Guarda apenas o ID do documento localmente para restaurar a sessão no refresh
            localStorage.setItem('usuarioAtualId', participante.docId); 
            
            document.getElementById('card-login').style.display = 'none';
            document.getElementById('card-usuario').style.display = 'block';
            atualizarProgresso();
        }

        async function validarCheckpoint(idCheckpoint) {
            const checkpoint = window.checkpoints.find(cp => cp.id === idCheckpoint);
            
            pararCamera(); // Para o scanner imediatamente após a leitura
            
            if (!window.usuarioAtual) {
                showMessage('Erro', 'Você precisa estar logado para validar um checkpoint.');
                return;
            }

            if (!checkpoint) {
                showMessage('QR Inválido', 'O código escaneado não corresponde a um checkpoint de evento.');
                return;
            }
            
            if (window.usuarioAtual.checkpoints.includes(idCheckpoint)) {
                showMessage('Aviso', `Você já validou o checkpoint: ${checkpoint.nome}.`);
                return;
            } 
            
            try {
                // 1. Cria a referência para o documento do participante
                const docRef = doc(db, PARTICIPANTES_COLLECTION_PATH, window.usuarioAtual.docId);
                
                // 2. Adiciona o novo checkpoint ao array (Atomic Update)
                const newCheckpoints = [...window.usuarioAtual.checkpoints, idCheckpoint];

                await updateDoc(docRef, {
                    checkpoints: newCheckpoints
                });

                // O onSnapshot fará o resto da atualização da UI.
                showMessage('Sucesso', `Checkpoint "${checkpoint.nome}" validado!`);
                
            } catch (error) {
                console.error("Erro ao validar checkpoint:", error);
                showMessage('Erro', 'Não foi possível atualizar seu progresso. Tente novamente.');
            }
        }
        
        async function removerParticipante(docId, nome) {
            showConfirm('Remover Participante', `Tem certeza que deseja remover ${nome}? Esta ação é permanente no banco de dados.`, async (confirmed) => {
                if (confirmed) {
                    try {
                        await deleteDoc(doc(db, PARTICIPANTES_COLLECTION_PATH, docId));
                        
                        // Limpeza local se o usuário atual for removido
                        if (window.usuarioAtual && window.usuarioAtual.docId === docId) {
                            window.usuarioAtual = null;
                            localStorage.removeItem('usuarioAtualId');
                            document.getElementById('card-login').style.display = 'block';
                            document.getElementById('card-usuario').style.display = 'none';
                        }
                        // O onSnapshot cuidará de remover da lista 'participantes' e atualizar a UI
                        showMessage('Sucesso', `${nome} removido(a) do banco de dados.`);
                    } catch (error) {
                        console.error("Erro ao remover participante:", error);
                        showMessage('Erro', 'Não foi possível remover o participante.');
                    }
                }
            });
        }

        async function carregarUsuariosTeste() {
            showConfirm('Carregar Dados Teste', 'Isso adicionará 3 usuários de teste ao banco de dados. Deseja continuar?', async (confirmed) => {
                if (!confirmed) return;

                let sucessoCount = 0;
                let erroCount = 0;
                
                for (const user of USUARIOS_TESTE) {
                    try {
                        // Prepara os dados para o Firestore
                        const userData = {
                            authId: `TEST_USER_${user.cpf}`, // ID de Auth de placeholder
                            nome: user.nome,
                            cpf: user.cpf,
                            checkpoints: user.checkpoints,
                            dataInscricao: new Date().toISOString()
                        };
                        
                        // Verifica se o CPF já existe para evitar duplicatas
                        const existing = participantes.find(p => p.cpf === user.cpf);
                        if (existing) {
                            continue; 
                        }

                        await addDoc(collection(db, PARTICIPANTES_COLLECTION_PATH), userData);
                        sucessoCount++;
                    } catch (error) {
                        console.error("Erro ao carregar usuário teste:", user.nome, error);
                        erroCount++;
                    }
                }
                
                // A UI será atualizada pelo onSnapshot
                showMessage('Carregamento Concluído', `${sucessoCount} usuários teste adicionados com sucesso. ${erroCount} falharam ou já existiam.`);
            });
        }
        
        // --- FUNÇÕES DE ADMIN E UI (Adaptadas) ---

        function atualizarListaParticipantes() {
            const painelAdmin = document.getElementById('painel-admin');
            if (painelAdmin.style.display !== 'block') return; // Só atualiza se o painel estiver aberto

            const lista = document.getElementById('lista-participantes');
            lista.innerHTML = '<h4 class="text-xl font-semibold mb-3 text-white">Participantes Atuais (Em Tempo Real):</h4>';
            
            // Usando a lista global 'participantes' preenchida pelo onSnapshot
            const participantesOrdenados = [...participantes].sort((a, b) => new Date(b.dataInscricao) - new Date(a.dataInscricao));

            if (participantesOrdenados.length === 0) {
                 lista.innerHTML += '<p class="text-gray-400">Nenhum participante cadastrado ainda.</p>';
                 return;
            }

            participantesOrdenados.forEach(p => {
                const isQualificado = p.checkpoints.length >= 3;
                const statusColor = isQualificado ? 'text-success' : 'text-danger';
                const qualifText = isQualificado ? 'Qualificado' : 'Pendente';
                const checkpointNames = window.checkpoints.map(cp => cp.id); // Certifique-se de que window.checkpoints está definido

                const itemDiv = document.createElement('div');
                itemDiv.className = `p-3 rounded-lg shadow-md border ${isQualificado ? 'border-success bg-gray-900' : 'border-gray-700'} flex justify-between items-center`;
                itemDiv.innerHTML = `
                    <div>
                        <p class="font-bold text-white">${p.nome}</p>
                        <p class="text-sm text-gray-400">CPF: ${formatarCPF(p.cpf)}</p>
                        <p class="text-xs mt-1 ${statusColor}">Status: ${qualifText} (${p.checkpoints.length}/3)</p>
                        <p class="text-xs text-gray-500">Validados: ${p.checkpoints.map(id => window.checkpoints.find(cp => cp.id === id)?.nome || id).join(', ')}</p>
                    </div>
                    <button class="py-1 px-3 bg-danger hover:bg-red-700 text-white text-sm rounded-lg transition duration-150 shadow-md" data-doc-id="${p.docId}" data-nome="${p.nome}" onclick="removerParticipante(this.dataset.docId, this.dataset.nome)">
                        Remover
                    </button>
                `;
                lista.appendChild(itemDiv);
            });
        }

        // --- FUNÇÕES GLOBAIS DE UTILIDADE (Mantidas/Adaptadas) ---

        /** Função customizada para mostrar mensagens (substitui alert()) */
        function showMessage(title, message) {
            // ... (Corpo da função showMessage)
            const modalTitle = document.getElementById('modal-title');
            const modalMessage = document.getElementById('modal-message');
            const modalActions = document.getElementById('modal-actions');
            const modalBackdrop = document.getElementById('modal-backdrop');
            const customModal = document.getElementById('custom-modal');

            modalTitle.textContent = title;
            modalMessage.textContent = message;
            modalActions.innerHTML = `
                <button id="modal-ok-btn" class="py-2 px-4 bg-primary hover:bg-secondary text-white font-semibold rounded-lg transition duration-150">
                    OK
                </button>
            `;
            modalBackdrop.classList.remove('hidden');
            modalBackdrop.classList.add('flex');
            setTimeout(() => {
                customModal.classList.remove('scale-95', 'opacity-0');
            }, 50);

            document.getElementById('modal-ok-btn').onclick = () => {
                customModal.classList.add('scale-95', 'opacity-0');
                setTimeout(() => {
                    modalBackdrop.classList.remove('flex');
                    modalBackdrop.classList.add('hidden');
                }, 300);
            };
        }

        /** Função customizada para confirmação (substitui confirm()) */
        function showConfirm(title, message, callback) {
            // ... (Corpo da função showConfirm)
            const modalTitle = document.getElementById('modal-title');
            const modalMessage = document.getElementById('modal-message');
            const modalActions = document.getElementById('modal-actions');
            const modalBackdrop = document.getElementById('modal-backdrop');
            const customModal = document.getElementById('custom-modal');

            modalTitle.textContent = title;
            modalMessage.textContent = message;
            modalActions.innerHTML = `
                <button id="modal-cancel-btn" class="py-2 px-4 bg-gray-300 hover:bg-gray-400 text-gray-800 font-semibold rounded-lg transition duration-150">
                    Cancelar
                </button>
                <button id="modal-confirm-btn" class="py-2 px-4 bg-danger hover:bg-red-700 text-white font-semibold rounded-lg transition duration-150">
                    Confirmar
                </button>
            `;
            modalBackdrop.classList.remove('hidden');
            modalBackdrop.classList.add('flex');
            setTimeout(() => {
                customModal.classList.remove('scale-95', 'opacity-0');
            }, 50);

            const hideModal = () => {
                customModal.classList.add('scale-95', 'opacity-0');
                setTimeout(() => {
                    modalBackdrop.classList.remove('flex');
                    modalBackdrop.classList.add('hidden');
                }, 300);
            };

            document.getElementById('modal-confirm-btn').onclick = () => {
                callback(true);
                hideModal();
            };
            document.getElementById('modal-cancel-btn').onclick = () => {
                callback(false);
                hideModal();
            };
        }

        function formatarCPF(cpf) {
            if (cpf && cpf.length === 11) {
                return cpf.replace(/(\d{3})(\d{3})(\d{3})(\d{2})/, "$1.$2.$3-$4");
            }
            return cpf || '';
        }

        // Estas funções agora usam a lista global 'participantes' populada pelo Firestore
        
        function atualizarProgresso() {
            if (!window.usuarioAtual) return;

            const infoUsuario = document.getElementById('info-usuario');
            const barraProgresso = document.getElementById('barra-progresso');
            const textoProgresso = document.getElementById('texto-progresso');
            const listaCheckpoints = document.getElementById('lista-checkpoints');

            infoUsuario.innerHTML = `
                <h3 class="text-lg font-bold">${window.usuarioAtual.nome}</h3>
                <p class="text-sm text-gray-500">CPF: ${formatarCPF(window.usuarioAtual.cpf)}</p>
            `;
            
            const checkpointsValidados = window.usuarioAtual.checkpoints.length;
            const metaCheckpoints = 3; 
            const porcentagem = Math.min((checkpointsValidados / metaCheckpoints) * 100, 100);
            
            barraProgresso.style.width = porcentagem + '%';
            textoProgresso.textContent = `${checkpointsValidados} de ${metaCheckpoints} checkpoints validados`;
            
            listaCheckpoints.innerHTML = '';
            window.checkpoints.forEach(checkpoint => {
                const isValidado = window.usuarioAtual.checkpoints.includes(checkpoint.id);
                const icon = isValidado ? '✅' : '📍';
                const statusText = isValidado ? 'Validado' : 'Pendente';
                const statusColor = isValidado ? 'bg-success text-white' : 'bg-gray-200 text-gray-600';

                const item = document.createElement('div');
                item.className = `p-3 rounded-lg text-center shadow-sm border ${isValidado ? 'border-success bg-green-50' : 'border-gray-300 bg-white'}`;
                item.innerHTML = `
                    <div class="text-xl mb-1">${icon}</div>
                    <div class="text-xs font-semibold text-gray-700">${checkpoint.nome}</div>
                    <div class="text-[10px] font-bold mt-1 px-1 py-0.5 rounded-full ${statusColor} inline-block">${statusText}</div>
                `;
                listaCheckpoints.appendChild(item);
            });
        }
        
        function iniciarCamera() {
            if (!window.usuarioAtual) {
                showMessage('Erro', 'Você precisa fazer o login ou a inscrição antes de escanear.');
                return;
            }

            // O resto da lógica da câmera...
            navigator.mediaDevices.getUserMedia({ 
                video: { facingMode: "environment" } 
            }).then(stream => {
                window.streamVideo = stream;
                document.getElementById('qr-video').srcObject = stream;
                document.getElementById('qr-video').play();
                window.scaneando = true;
                escanear();
                
                document.getElementById('iniciar-camera').style.display = 'none';
                document.getElementById('parar-camera').style.display = 'block';
                document.getElementById('qr-video').classList.remove('hidden');
                document.getElementById('qr-video').style.display = 'block'; 
                document.getElementById('status-scanner').textContent = 'Posicione o QR Code na câmera...';
            }).catch(err => {
                document.getElementById('status-scanner').textContent = 'Erro ao acessar câmera: ' + err.message;
                showMessage('Erro Câmera', 'Não foi possível acessar a câmera. Verifique as permissões.');
            });
        }
        
        function pararCamera() {
            if (window.streamVideo) {
                window.streamVideo.getTracks().forEach(track => track.stop());
            }
            window.scaneando = false;
            document.getElementById('qr-video').srcObject = null;
            document.getElementById('qr-video').style.display = 'none'; 
            document.getElementById('iniciar-camera').style.display = 'block';
            document.getElementById('parar-camera').style.display = 'none';
            document.getElementById('status-scanner').textContent = 'Câmera Parada.';
            document.getElementById('resultado-scan').classList.add('hidden');
        }
        
        function escanear() {
            if (!window.scaneando) return;
            
            const video = document.getElementById('qr-video');

            if (video.readyState === video.HAVE_ENOUGH_DATA) {
                const canvas = document.createElement('canvas');
                canvas.width = video.videoWidth;
                canvas.height = video.videoHeight;
                const ctx = canvas.getContext('2d');
                ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
                
                const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
                // jsQR é definido globalmente
                const code = jsQR(imageData.data, imageData.width, imageData.height);
                
                if (code) {
                    validarCheckpoint(code.data);
                }
            }
            
            requestAnimationFrame(escanear);
        }

        function acessarAdmin() {
            const senha = document.getElementById('senha-admin').value;
            const painelAdmin = document.getElementById('painel-admin');

            if (senha === 'admin123') { 
                painelAdmin.style.display = 'block';
                document.getElementById('form-admin').style.display = 'none';
                // A lista será atualizada automaticamente pelo listener do Firestore
            } else {
                showMessage('Erro de Acesso', 'Senha incorreta.');
            }
        }
        
        function realizarSorteio() {
            const qualificados = window.participantes.filter(p => p.checkpoints.length >= 3);
            const resultadoDiv = document.getElementById('resultado-sorteio');
            
            if (qualificados.length === 0) {
                showMessage('Sorteio', 'Nenhum participante qualificado para o sorteio (mínimo de 3 checkpoints).');
                resultadoDiv.innerHTML = '';
                return;
            }
            
            // ... (Lógica de animação do sorteio)
            resultadoDiv.innerHTML = '<p class="text-white text-center font-bold">Iniciando Sorteio...</p>';
            
            let sorteioInterval;
            let count = 0;
            const maxCount = 40; 
            const listaSorteio = qualificados.map(p => p.nome);

            function girar() {
                if (count >= maxCount) {
                    clearInterval(sorteioInterval);
                    
                    const vencedor = qualificados[Math.floor(Math.random() * qualificados.length)];
                    resultadoDiv.innerHTML = `
                        <div class="bg-success text-white p-6 rounded-lg shadow-xl mt-4 text-center border-4 border-accent animate-bounce-slow">
                            <h3 class="text-3xl font-extrabold mb-2">🎉 VENCEDOR! 🎉</h3>
                            <p class="text-xl font-bold">${vencedor.nome}</p>
                            <p class="text-sm">CPF: ${formatarCPF(vencedor.cpf)}</p>
                        </div>
                    `;
                    return;
                }
                
                const nomeAleatorio = listaSorteio[Math.floor(Math.random() * listaSorteio.length)];
                resultadoDiv.innerHTML = `
                    <div class="bg-gray-700 text-accent p-3 rounded-lg mt-4 text-center">
                        <p class="text-lg font-bold">${nomeAleatorio}</p>
                    </div>
                `;

                count++;
            }

            sorteioInterval = setInterval(girar, 100); 
        }

        // Inicia o Firebase ao carregar a página
        document.addEventListener('DOMContentLoaded', initFirebase);

    </script>
    <!-- Biblioteca para LER QR Codes -->
    <script src="https://cdn.jsdelivr.net/npm/jsqr@1.4.0/dist/jsQR.js"></script>
    <!-- Biblioteca para GERAR QR Codes -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/qrcodejs/1.0.0/qrcode.min.js"></script>
</head>
<body class="bg-gray-100 min-h-screen">
    
    <!-- Modal Customizado (Substitui alert e confirm) -->
    <div id="modal-backdrop" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden items-center justify-center">
        <div id="custom-modal" class="bg-white p-6 rounded-xl shadow-2xl max-w-sm w-full mx-4 transform transition-all duration-300 scale-95 opacity-0">
            <h4 id="modal-title" class="text-xl font-bold mb-4 text-primary">Aviso</h4>
            <p id="modal-message" class="mb-6 text-gray-700"></p>
            <div id="modal-actions" class="flex justify-end space-x-3">
                <!-- Buttons will be inserted here -->
            </div>
        </div>
    </div>
    
    <div class="container mx-auto p-4 max-w-3xl">
        <header class="text-center mb-8 p-6 bg-gradient-to-br from-primary to-secondary text-white rounded-xl shadow-lg">
            <h1 class="text-3xl font-extrabold">Sorteio FIC 2025</h1>
            <p class="mt-2 text-indigo-200">Valide sua presença em 3 checkpoints para participar do sorteio!</p>
        </header>
        
        <main class="space-y-6">
            
            <!-- Inscrição -->
            <div class="bg-white p-6 rounded-xl shadow-lg border-t-4 border-primary">
                <h2 class="text-2xl font-semibold mb-4 text-primary">Fazer Inscrição</h2>
                <!-- Removendo o event listener inline e usando a função global -->
                <form id="form-inscricao" class="space-y-4" onsubmit="window.fazerInscricao(event)">
                    <div>
                        <label for="nome" class="block text-sm font-medium text-gray-700">Nome Completo</label>
                        <input type="text" id="nome" required class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-primary focus:border-primary transition duration-150">
                    </div>
                    <div>
                        <label for="cpf" class="block text-sm font-medium text-gray-700">CPF (apenas números)</label>
                        <input type="text" id="cpf" required class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-primary focus:border-primary transition duration-150" maxlength="11">
                    </div>
                    <button type="submit" class="w-full py-3 px-4 bg-primary hover:bg-secondary text-white font-bold rounded-lg transition duration-150 shadow-md">Realizar Inscrição</button>
                </form>
            </div>
            
            <!-- Login -->
            <div class="bg-white p-6 rounded-xl shadow-lg border-t-4 border-success" id="card-login" style="display: none;">
                <h2 class="text-2xl font-semibold mb-4 text-success">Já é Cadastrado?</h2>
                <!-- Removendo o event listener inline e usando a função global -->
                <form id="form-login" class="space-y-4" onsubmit="window.fazerLogin(event)">
                    <div>
                        <label for="cpf-login" class="block text-sm font-medium text-gray-700">CPF</label>
                        <input type="text" id="cpf-login" required class="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-success focus:border-success transition duration-150" maxlength="11">
                    </div>
                    <button type="submit" class="w-full py-3 px-4 bg-success hover:bg-teal-600 text-white font-bold rounded-lg transition duration-150 shadow-md">Acessar Minha Conta</button>
                </form>
            </div>
            
            <!-- Área do Usuário / Progresso -->
            <div class="bg-white p-6 rounded-xl shadow-lg border-t-4 border-accent" id="card-usuario" style="display: none;">
                <h2 class="text-2xl font-semibold mb-4 text-accent">Meu Progresso</h2>
                <div id="info-usuario" class="mb-4 p-3 bg-gray-50 rounded-lg border border-gray-200"></div>
                
                <div class="progress-container mb-6">
                    <div id="texto-progresso" class="text-sm font-medium mb-1 text-gray-700">0 de 3 checkpoints validados</div>
                    <div class="h-3 bg-gray-200 rounded-full overflow-hidden">
                        <div class="h-full bg-gradient-to-r from-success to-primary rounded-full transition-all duration-500 ease-out" id="barra-progresso" style="width: 0%"></div>
                    </div>
                </div>
                
                <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-5 gap-4" id="lista-checkpoints">
                    <!-- Checkpoints serão preenchidos aqui -->
                </div>
            </div>
            
            <!-- Scanner de QR Code -->
            <div class="bg-white p-6 rounded-xl shadow-lg border-t-4 border-secondary">
                <h2 class="text-2xl font-semibold mb-4 text-secondary">Escanear QR Code</h2>
                <div class="scanner-container text-center space-y-4">
                    <video id="qr-video" class="w-full max-w-sm mx-auto rounded-lg border-4 border-secondary shadow-inner"></video>
                    <div id="status-scanner" class="text-gray-500">Clique em Iniciar Câmera</div>
                    <div class="flex flex-col sm:flex-row gap-4 max-w-sm mx-auto">
                        <button id="iniciar-camera" class="flex-1 py-3 px-4 bg-success hover:bg-teal-600 text-white font-bold rounded-lg transition duration-150 shadow-md" onclick="window.iniciarCamera()">Iniciar Câmera</button>
                        <button id="parar-camera" class="flex-1 py-3 px-4 bg-danger hover:bg-red-700 text-white font-bold rounded-lg transition duration-150 shadow-md" style="display: none;" onclick="window.pararCamera()">Parar Câmera</button>
                    </div>
                </div>
                <div id="resultado-scan" class="hidden mt-4 p-4 bg-green-100 border-l-4 border-success text-green-700 rounded-lg">
                    <h3 class="font-bold">✅ Checkpoint Validado!</h3>
                    <p id="mensagem-scan"></p>
                </div>
            </div>
            
            <!-- Área do Organizador -->
            <div class="bg-gray-800 p-6 rounded-xl shadow-lg text-white border-t-4 border-accent">
                <h3 class="text-2xl font-semibold mb-4 text-accent">🔒 Área do Organizador</h3>
                
                <div id="form-admin" class="space-y-4">
                    <input type="password" id="senha-admin" placeholder="Senha de administração" class="w-full px-4 py-2 border border-gray-600 rounded-lg bg-gray-700 text-white placeholder-gray-400 focus:ring-accent focus:border-accent">
                    <button onclick="window.acessarAdmin()" class="w-full py-3 px-4 bg-accent hover:bg-yellow-600 text-gray-800 font-bold rounded-lg transition duration-150 shadow-md">Acessar Painel</button>
                </div>
                
                <div id="painel-admin" class="mt-4 space-y-6" style="display: none;">
                    
                    <!-- Geração de QR Codes -->
                    <div id="area-qr-codes" class="p-4 bg-gray-700 rounded-lg shadow-inner">
                        <h4 class="text-xl font-semibold mb-3 text-white">Gerar QRs para Impressão (Geração Única)</h4>
                        <p class="text-sm text-gray-400 mb-4">Esses códigos são estáticos e válidos para todo o evento. Gere uma única vez e imprima.</p>
                        <button onclick="window.gerarQRCodes()" id="btn-gerar-qr" class="w-full py-3 px-4 bg-indigo-500 hover:bg-indigo-600 text-white font-bold rounded-lg transition duration-150 shadow-md">Gerar e Exibir QR Codes</button>
                        
                        <div id="qr-codes-container" class="mt-6 grid grid-cols-1 sm:grid-cols-2 gap-4">
                            <!-- QRs serão gerados aqui -->
                        </div>
                    </div>
                    
                    <!-- Sorteio e Participantes -->
                    <div class="p-4 bg-gray-700 rounded-lg shadow-inner">
                        <h4 class="text-xl font-semibold mb-3 text-white">Controle de Participantes</h4>
                        <div class="flex flex-col sm:flex-row gap-3 mb-4">
                            <button onclick="window.realizarSorteio()" class="flex-1 py-3 px-4 bg-success hover:bg-teal-600 text-white font-bold rounded-lg transition duration-150 shadow-md">Realizar Sorteio</button>
                            <button onclick="window.exportarParaPlanilha()" class="flex-1 py-3 px-4 bg-indigo-500 hover:bg-indigo-600 text-white font-bold rounded-lg transition duration-150 shadow-md">Exportar para Planilha (.csv)</button>
                        </div>
                        <!-- NOVO BOTÃO DE TESTE -->
                        <button onclick="window.carregarUsuariosTeste()" class="w-full py-3 px-4 bg-gray-500 hover:bg-gray-600 text-white font-bold rounded-lg transition duration-150 shadow-md mb-4">Carregar Usuários Teste (Seeding)</button>
                        <div id="resultado-sorteio"></div>
                        <div id="lista-participantes" class="mt-4 space-y-2"></div>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <script>
        // Dados de Checkpoints (Definidos no escopo global para o HTML acessar)
        window.checkpoints = [
            { id: 'checkpoint1', nome: 'Recepção' },
            { id: 'checkpoint2', nome: 'Auditório Principal' },
            { id: 'checkpoint3', nome: 'Área de Exposição' },
            { id: 'checkpoint4', nome: 'Sala de Workshop' },
            { id: 'checkpoint5', nome: 'Área de Networking' }
        ];

        // Variáveis de estado da câmera (Definidas no escopo global)
        window.streamVideo = null;
        window.scaneando = false;
        window.usuarioAtual = null;

        // Exporta a lista de participantes para um arquivo CSV. 
        function exportarParaPlanilha() {
            if (window.participantes.length === 0) {
                showMessage('Exportação', 'Não há participantes para exportar.');
                return;
            }
            
            let header = ['Nome', 'CPF', 'Qualificado (3 Checkpoints)', 'Checkpoints Validados', 'Data Inscrição'];
            
            const checkpointNames = window.checkpoints.map(cp => `Status: ${cp.nome}`);
            header = header.concat(checkpointNames);
            
            const csvHeader = header.join(',');
            
            const csvData = window.participantes.map(p => {
                const metaCheckpoints = 3;
                const qualificado = p.checkpoints.length >= metaCheckpoints ? 'Sim' : 'Não';
                const checkpointsValidados = p.checkpoints.length;
                
                const dataFormatada = new Date(p.dataInscricao).toLocaleString('pt-BR');

                const safeName = `"${p.nome.replace(/"/g, '""')}"`;
                
                const checkpointStatus = window.checkpoints.map(cp => {
                    return p.checkpoints.includes(cp.id) ? 'VALIDADO' : 'PENDENTE';
                }).join(',');

                return [
                    safeName,
                    `"${formatarCPF(p.cpf)}"`,
                    qualificado,
                    checkpointsValidados,
                    dataFormatada,
                    checkpointStatus
                ].join(',');
            }).join('\n');

            const csvContent = csvHeader + '\n' + csvData;
            
            const blob = new Blob(["\ufeff", csvContent], { type: 'text/csv;charset=utf-8;' });
            const url = URL.createObjectURL(blob);
            
            const link = document.createElement('a');
            link.setAttribute('href', url);
            link.setAttribute('download', `participantes_evento_${Date.now()}.csv`);
            link.style.visibility = 'hidden';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);

            showMessage('Exportação Concluída', 'Arquivo CSV baixado com sucesso! Você pode importá-lo no Google Sheets.');
        }

        // Geração dos QR Codes
        function gerarQRCodes() {
            const container = document.getElementById('qr-codes-container');
            container.innerHTML = ''; 
            container.classList.add('qr-print-area');
            
            window.checkpoints.forEach(checkpoint => {
                const qrWrapper = document.createElement('div');
                qrWrapper.className = 'qr-code-item p-4 bg-white rounded-xl shadow-lg text-center transition hover:shadow-xl';
                qrWrapper.innerHTML = `
                    <h5 class="text-lg font-semibold mb-2 text-indigo-700">${checkpoint.nome}</h5>
                    <div id="qr-${checkpoint.id}" class="w-full flex justify-center p-2 bg-gray-50 rounded-lg"></div>
                    <p class="text-xs text-gray-500 mt-2">ID: ${checkpoint.id}</p>
                `;
                container.appendChild(qrWrapper);

                new QRCode(document.getElementById(`qr-${checkpoint.id}`), {
                    text: checkpoint.id, 
                    width: 128,
                    height: 128,
                    colorDark: "#333333",
                    colorLight: "#ffffff",
                    correctLevel: QRCode.CorrectLevel.H
                });
            });

            const printButton = document.createElement('button');
            printButton.textContent = 'Imprimir QRs para o Evento';
            printButton.className = 'w-full mt-6 py-3 px-4 bg-teal-600 hover:bg-teal-700 text-white font-bold rounded-lg transition duration-150 shadow-md print:hidden';
            printButton.onclick = () => window.print();
            container.appendChild(printButton);

            document.getElementById('btn-gerar-qr').style.display = 'none';
        }
    </script>
</body>
</html>
